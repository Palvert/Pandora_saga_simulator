<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  
<head>
    <title>
      /lang/javascript/deflate/trunk/rawinflate.js –
      CodeRepos::Share – Trac
    </title>
        <link rel="search" href="/share/search" />
        <link rel="help" href="/share/wiki/TracGuide" />
        <link rel="alternate" href="/share/browser/lang/javascript/deflate/trunk/rawinflate.js?format=txt" type="text/plain" title="Plain Text" /><link rel="alternate" href="/share/export/38979/lang/javascript/deflate/trunk/rawinflate.js" type="text/x-javascript; charset=utf-8" title="Original Format" />
        <link rel="up" href="/share/browser/lang/javascript/deflate/trunk" title="Parent directory" />
        <link rel="start" href="/share/wiki" />
        <link rel="stylesheet" href="/share/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/share/chrome/common/css/code.css" type="text/css" /><link rel="stylesheet" href="/share/chrome/common/css/browser.css" type="text/css" />
        <link rel="shortcut icon" href="/share/chrome/common/trac.ico" type="image/x-icon" />
        <link rel="icon" href="/share/chrome/common/trac.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/share/search/opensearch" title="Search CodeRepos::Share" />
    <script type="text/javascript" src="/share/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/share/chrome/common/js/trac.js"></script><script type="text/javascript" src="/share/chrome/common/js/search.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/share/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
    <link rel="stylesheet" type="text/css" media="screen,tv,projection" title="ass-ari" href="http://svn.coderepos.org/share/websites/coderepos.org/trac/share/styles/ass-ari.css" /><link rel="alternate stylesheet" type="text/css" media="screen,tv,projection" title="plants-repository" href="http://svn.coderepos.org/share/websites/coderepos.org/trac/share/styles/plants-repository.css" /><link rel="alternate stylesheet" type="text/css" media="screen,tv,projection" title="default" href="http://svn.coderepos.org/share/websites/coderepos.org/trac/share/styles/default.css" /><link rel="openid2.provider" href="http://openid.coderepos.org/auth" /><link rel="openid.server" href="http://openid.coderepos.org/auth" /><script type="text/javascript" src="http://svn.coderepos.org/share/lang/javascript/javascript-xpath/trunk/release/javascript-xpath-latest-cmp.js"></script><script type="text/javascript" src="http://svn.coderepos.org/share/lang/javascript/javascript-xpath/bindings/jquery/src/xpath4jquery.js"></script><script type="text/javascript" src="http://svn.coderepos.org/share/websites/coderepos.org/trac/share/js/TracUtils.js"></script>
  </head>


  

  <head>
    <title>/lang/javascript/deflate/trunk/rawinflate.js</title>
    <script type="text/javascript">
      jQuery(document).ready(function($) {
        $("#jumploc input").hide();
        $("#jumploc select").change(function () {
          this.parentNode.parentNode.submit();
        })
      });
    </script>
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="/share/wiki/TracIni#header_logo-section"><img src="/share/chrome/site/your_project_logo.png" alt="(please configure the [header_logo] section in trac.ini)" /></a>
      </div>
      <form id="search" action="/share/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/share/login">Login</a></li><li><a href="/share/prefs">Preferences</a></li><li><a href="/share/wiki/TracGuide">Help/Guide</a></li><li class="last"><a href="/share/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/share/wiki">Wiki</a></li><li><a href="/share/timeline">Timeline</a></li><li><a href="/share/roadmap">Roadmap</a></li><li class="active"><a href="/share/browser">Browse Source</a></li><li><a href="/share/report">View Tickets</a></li><li class="last"><a href="/share/search">Search</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
            <li class="first "><a href="/share/changeset/30677/lang/javascript/deflate/trunk/rawinflate.js">Last Change</a></li><li><a href="/share/browser/lang/javascript/deflate/trunk/rawinflate.js?annotate=blame&amp;rev=30677" title="Annotate each line with the last changed revision (this can be time consuming...)">Annotate</a></li><li class="last"><a href="/share/log/lang/javascript/deflate/trunk/rawinflate.js">Revision Log</a></li>
          </ul>
        <hr />
      </div>
    <div id="content" class="browser">
      <h1>
    <a class="pathentry first" title="Go to root directory" href="/share/browser">root</a><span class="pathentry sep">/</span><a class="pathentry" title="View lang" href="/share/browser/lang">lang</a><span class="pathentry sep">/</span><a class="pathentry" title="View javascript" href="/share/browser/lang/javascript">javascript</a><span class="pathentry sep">/</span><a class="pathentry" title="View deflate" href="/share/browser/lang/javascript/deflate">deflate</a><span class="pathentry sep">/</span><a class="pathentry" title="View trunk" href="/share/browser/lang/javascript/deflate/trunk">trunk</a><span class="pathentry sep">/</span><a class="pathentry" title="View rawinflate.js" href="/share/browser/lang/javascript/deflate/trunk/rawinflate.js">rawinflate.js</a>
    <br style="clear: both" />
  </h1>
      <div id="jumprev">
        <form action="" method="get">
          <div>
            <label for="rev">
              View revision:</label>
            <input type="text" id="rev" name="rev" size="6" />
          </div>
        </form>
      </div>
      <table id="info" summary="Revision info">
        <tr>
          <th scope="col">
            Revision <a href="/share/changeset/30677">30677</a>, <span title="19663 bytes">19.2 kB</span>
            (checked in by dankogai, <a class="timeline" href="/share/timeline?from=2009-03-02T04%3A10%3A26Z%2B0900&amp;precision=second" title="2009-03-02T04:10:26Z+0900 in Timeline">2 years</a> ago)
          </th>
        </tr>
        <tr>
          <td class="message searchable">
              <p>
rawdeflate.js:tiny fix <br />
</p>
          </td>
        </tr>
      </table>
      <div id="preview" class="searchable">
    <table class="code"><thead><tr><th class="lineno" title="Line numbers">Line</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td>/*</td></tr><tr><th id="L2"><a href="#L2">2</a></th><td> * $Id: rawinflate.js,v 0.2 2009/03/01 18:32:24 dankogai Exp $</td></tr><tr><th id="L3"><a href="#L3">3</a></th><td> *</td></tr><tr><th id="L4"><a href="#L4">4</a></th><td> * original:</td></tr><tr><th id="L5"><a href="#L5">5</a></th><td> * http://www.onicos.com/staff/iz/amuse/javascript/expert/inflate.txt</td></tr><tr><th id="L6"><a href="#L6">6</a></th><td> */</td></tr><tr><th id="L7"><a href="#L7">7</a></th><td></td></tr><tr><th id="L8"><a href="#L8">8</a></th><td>(function(){</td></tr><tr><th id="L9"><a href="#L9">9</a></th><td></td></tr><tr><th id="L10"><a href="#L10">10</a></th><td>/* Copyright (C) 1999 Masanao Izumo &lt;iz@onicos.co.jp&gt;</td></tr><tr><th id="L11"><a href="#L11">11</a></th><td> * Version: 1.0.0.1</td></tr><tr><th id="L12"><a href="#L12">12</a></th><td> * LastModified: Dec 25 1999</td></tr><tr><th id="L13"><a href="#L13">13</a></th><td> */</td></tr><tr><th id="L14"><a href="#L14">14</a></th><td></td></tr><tr><th id="L15"><a href="#L15">15</a></th><td>/* Interface:</td></tr><tr><th id="L16"><a href="#L16">16</a></th><td> * data = zip_inflate(src);</td></tr><tr><th id="L17"><a href="#L17">17</a></th><td> */</td></tr><tr><th id="L18"><a href="#L18">18</a></th><td></td></tr><tr><th id="L19"><a href="#L19">19</a></th><td>/* constant parameters */</td></tr><tr><th id="L20"><a href="#L20">20</a></th><td>var zip_WSIZE = 32768;          // Sliding Window size</td></tr><tr><th id="L21"><a href="#L21">21</a></th><td>var zip_STORED_BLOCK = 0;</td></tr><tr><th id="L22"><a href="#L22">22</a></th><td>var zip_STATIC_TREES = 1;</td></tr><tr><th id="L23"><a href="#L23">23</a></th><td>var zip_DYN_TREES    = 2;</td></tr><tr><th id="L24"><a href="#L24">24</a></th><td></td></tr><tr><th id="L25"><a href="#L25">25</a></th><td>/* for inflate */</td></tr><tr><th id="L26"><a href="#L26">26</a></th><td>var zip_lbits = 9;              // bits in base literal/length lookup table</td></tr><tr><th id="L27"><a href="#L27">27</a></th><td>var zip_dbits = 6;              // bits in base distance lookup table</td></tr><tr><th id="L28"><a href="#L28">28</a></th><td>var zip_INBUFSIZ = 32768;       // Input buffer size</td></tr><tr><th id="L29"><a href="#L29">29</a></th><td>var zip_INBUF_EXTRA = 64;       // Extra buffer</td></tr><tr><th id="L30"><a href="#L30">30</a></th><td></td></tr><tr><th id="L31"><a href="#L31">31</a></th><td>/* variables (inflate) */</td></tr><tr><th id="L32"><a href="#L32">32</a></th><td>var zip_slide;</td></tr><tr><th id="L33"><a href="#L33">33</a></th><td>var zip_wp;                     // current position in slide</td></tr><tr><th id="L34"><a href="#L34">34</a></th><td>var zip_fixed_tl = null;        // inflate static</td></tr><tr><th id="L35"><a href="#L35">35</a></th><td>var zip_fixed_td;               // inflate static</td></tr><tr><th id="L36"><a href="#L36">36</a></th><td>var zip_fixed_bl, fixed_bd;     // inflate static</td></tr><tr><th id="L37"><a href="#L37">37</a></th><td>var zip_bit_buf;                // bit buffer</td></tr><tr><th id="L38"><a href="#L38">38</a></th><td>var zip_bit_len;                // bits in bit buffer</td></tr><tr><th id="L39"><a href="#L39">39</a></th><td>var zip_method;</td></tr><tr><th id="L40"><a href="#L40">40</a></th><td>var zip_eof;</td></tr><tr><th id="L41"><a href="#L41">41</a></th><td>var zip_copy_leng;</td></tr><tr><th id="L42"><a href="#L42">42</a></th><td>var zip_copy_dist;</td></tr><tr><th id="L43"><a href="#L43">43</a></th><td>var zip_tl, zip_td;     // literal/length and distance decoder tables</td></tr><tr><th id="L44"><a href="#L44">44</a></th><td>var zip_bl, zip_bd;     // number of bits decoded by tl and td</td></tr><tr><th id="L45"><a href="#L45">45</a></th><td></td></tr><tr><th id="L46"><a href="#L46">46</a></th><td>var zip_inflate_data;</td></tr><tr><th id="L47"><a href="#L47">47</a></th><td>var zip_inflate_pos;</td></tr><tr><th id="L48"><a href="#L48">48</a></th><td></td></tr><tr><th id="L49"><a href="#L49">49</a></th><td></td></tr><tr><th id="L50"><a href="#L50">50</a></th><td>/* constant tables (inflate) */</td></tr><tr><th id="L51"><a href="#L51">51</a></th><td>var zip_MASK_BITS = new Array(</td></tr><tr><th id="L52"><a href="#L52">52</a></th><td>    0x0000,</td></tr><tr><th id="L53"><a href="#L53">53</a></th><td>    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,</td></tr><tr><th id="L54"><a href="#L54">54</a></th><td>    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff);</td></tr><tr><th id="L55"><a href="#L55">55</a></th><td>// Tables for deflate from PKZIP's appnote.txt.</td></tr><tr><th id="L56"><a href="#L56">56</a></th><td>var zip_cplens = new Array( // Copy lengths for literal codes 257..285</td></tr><tr><th id="L57"><a href="#L57">57</a></th><td>    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,</td></tr><tr><th id="L58"><a href="#L58">58</a></th><td>    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0);</td></tr><tr><th id="L59"><a href="#L59">59</a></th><td>/* note: see note #13 above about the 258 in this list. */</td></tr><tr><th id="L60"><a href="#L60">60</a></th><td>var zip_cplext = new Array( // Extra bits for literal codes 257..285</td></tr><tr><th id="L61"><a href="#L61">61</a></th><td>    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,</td></tr><tr><th id="L62"><a href="#L62">62</a></th><td>    3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99); // 99==invalid</td></tr><tr><th id="L63"><a href="#L63">63</a></th><td>var zip_cpdist = new Array( // Copy offsets for distance codes 0..29</td></tr><tr><th id="L64"><a href="#L64">64</a></th><td>    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,</td></tr><tr><th id="L65"><a href="#L65">65</a></th><td>    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,</td></tr><tr><th id="L66"><a href="#L66">66</a></th><td>    8193, 12289, 16385, 24577);</td></tr><tr><th id="L67"><a href="#L67">67</a></th><td>var zip_cpdext = new Array( // Extra bits for distance codes</td></tr><tr><th id="L68"><a href="#L68">68</a></th><td>    0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,</td></tr><tr><th id="L69"><a href="#L69">69</a></th><td>    7, 7, 8, 8, 9, 9, 10, 10, 11, 11,</td></tr><tr><th id="L70"><a href="#L70">70</a></th><td>    12, 12, 13, 13);</td></tr><tr><th id="L71"><a href="#L71">71</a></th><td>var zip_border = new Array(  // Order of the bit length code lengths</td></tr><tr><th id="L72"><a href="#L72">72</a></th><td>    16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15);</td></tr><tr><th id="L73"><a href="#L73">73</a></th><td>/* objects (inflate) */</td></tr><tr><th id="L74"><a href="#L74">74</a></th><td></td></tr><tr><th id="L75"><a href="#L75">75</a></th><td>var zip_HuftList = function() {</td></tr><tr><th id="L76"><a href="#L76">76</a></th><td>    this.next = null;</td></tr><tr><th id="L77"><a href="#L77">77</a></th><td>    this.list = null;</td></tr><tr><th id="L78"><a href="#L78">78</a></th><td>}</td></tr><tr><th id="L79"><a href="#L79">79</a></th><td></td></tr><tr><th id="L80"><a href="#L80">80</a></th><td>var zip_HuftNode = function() {</td></tr><tr><th id="L81"><a href="#L81">81</a></th><td>    this.e = 0; // number of extra bits or operation</td></tr><tr><th id="L82"><a href="#L82">82</a></th><td>    this.b = 0; // number of bits in this code or subcode</td></tr><tr><th id="L83"><a href="#L83">83</a></th><td></td></tr><tr><th id="L84"><a href="#L84">84</a></th><td>    // union</td></tr><tr><th id="L85"><a href="#L85">85</a></th><td>    this.n = 0; // literal, length base, or distance base</td></tr><tr><th id="L86"><a href="#L86">86</a></th><td>    this.t = null; // (zip_HuftNode) pointer to next level of table</td></tr><tr><th id="L87"><a href="#L87">87</a></th><td>}</td></tr><tr><th id="L88"><a href="#L88">88</a></th><td></td></tr><tr><th id="L89"><a href="#L89">89</a></th><td>var zip_HuftBuild = function(b, // code lengths in bits (all assumed &lt;= BMAX)</td></tr><tr><th id="L90"><a href="#L90">90</a></th><td>                       n,       // number of codes (assumed &lt;= N_MAX)</td></tr><tr><th id="L91"><a href="#L91">91</a></th><td>                       s,       // number of simple-valued codes (0..s-1)</td></tr><tr><th id="L92"><a href="#L92">92</a></th><td>                       d,       // list of base values for non-simple codes</td></tr><tr><th id="L93"><a href="#L93">93</a></th><td>                       e,       // list of extra bits for non-simple codes</td></tr><tr><th id="L94"><a href="#L94">94</a></th><td>                       mm       // maximum lookup bits</td></tr><tr><th id="L95"><a href="#L95">95</a></th><td>                   ) {</td></tr><tr><th id="L96"><a href="#L96">96</a></th><td>    this.BMAX = 16;   // maximum bit length of any code</td></tr><tr><th id="L97"><a href="#L97">97</a></th><td>    this.N_MAX = 288; // maximum number of codes in any set</td></tr><tr><th id="L98"><a href="#L98">98</a></th><td>    this.status = 0;    // 0: success, 1: incomplete table, 2: bad input</td></tr><tr><th id="L99"><a href="#L99">99</a></th><td>    this.root = null;   // (zip_HuftList) starting table</td></tr><tr><th id="L100"><a href="#L100">100</a></th><td>    this.m = 0;         // maximum lookup bits, returns actual</td></tr><tr><th id="L101"><a href="#L101">101</a></th><td></td></tr><tr><th id="L102"><a href="#L102">102</a></th><td>/* Given a list of code lengths and a maximum table size, make a set of</td></tr><tr><th id="L103"><a href="#L103">103</a></th><td>   tables to decode that set of codes.  Return zero on success, one if</td></tr><tr><th id="L104"><a href="#L104">104</a></th><td>   the given code set is incomplete (the tables are still built in this</td></tr><tr><th id="L105"><a href="#L105">105</a></th><td>   case), two if the input is invalid (all zero length codes or an</td></tr><tr><th id="L106"><a href="#L106">106</a></th><td>   oversubscribed set of lengths), and three if not enough memory.</td></tr><tr><th id="L107"><a href="#L107">107</a></th><td>   The code with value 256 is special, and the tables are constructed</td></tr><tr><th id="L108"><a href="#L108">108</a></th><td>   so that no bits beyond that code are fetched when that code is</td></tr><tr><th id="L109"><a href="#L109">109</a></th><td>   decoded. */</td></tr><tr><th id="L110"><a href="#L110">110</a></th><td>    {</td></tr><tr><th id="L111"><a href="#L111">111</a></th><td>        var a;                  // counter for codes of length k</td></tr><tr><th id="L112"><a href="#L112">112</a></th><td>        var c = new Array(this.BMAX+1); // bit length count table</td></tr><tr><th id="L113"><a href="#L113">113</a></th><td>        var el;                 // length of EOB code (value 256)</td></tr><tr><th id="L114"><a href="#L114">114</a></th><td>        var f;                  // i repeats in table every f entries</td></tr><tr><th id="L115"><a href="#L115">115</a></th><td>        var g;                  // maximum code length</td></tr><tr><th id="L116"><a href="#L116">116</a></th><td>        var h;                  // table level</td></tr><tr><th id="L117"><a href="#L117">117</a></th><td>        var i;                  // counter, current code</td></tr><tr><th id="L118"><a href="#L118">118</a></th><td>        var j;                  // counter</td></tr><tr><th id="L119"><a href="#L119">119</a></th><td>        var k;                  // number of bits in current code</td></tr><tr><th id="L120"><a href="#L120">120</a></th><td>        var lx = new Array(this.BMAX+1);        // stack of bits per table</td></tr><tr><th id="L121"><a href="#L121">121</a></th><td>        var p;                  // pointer into c[], b[], or v[]</td></tr><tr><th id="L122"><a href="#L122">122</a></th><td>        var pidx;               // index of p</td></tr><tr><th id="L123"><a href="#L123">123</a></th><td>        var q;                  // (zip_HuftNode) points to current table</td></tr><tr><th id="L124"><a href="#L124">124</a></th><td>        var r = new zip_HuftNode(); // table entry for structure assignment</td></tr><tr><th id="L125"><a href="#L125">125</a></th><td>        var u = new Array(this.BMAX); // zip_HuftNode[BMAX][]  table stack</td></tr><tr><th id="L126"><a href="#L126">126</a></th><td>        var v = new Array(this.N_MAX); // values in order of bit length</td></tr><tr><th id="L127"><a href="#L127">127</a></th><td>        var w;</td></tr><tr><th id="L128"><a href="#L128">128</a></th><td>        var x = new Array(this.BMAX+1);// bit offsets, then code stack</td></tr><tr><th id="L129"><a href="#L129">129</a></th><td>        var xp;                 // pointer into x or c</td></tr><tr><th id="L130"><a href="#L130">130</a></th><td>        var y;                  // number of dummy codes added</td></tr><tr><th id="L131"><a href="#L131">131</a></th><td>        var z;                  // number of entries in current table</td></tr><tr><th id="L132"><a href="#L132">132</a></th><td>        var o;</td></tr><tr><th id="L133"><a href="#L133">133</a></th><td>        var tail;               // (zip_HuftList)</td></tr><tr><th id="L134"><a href="#L134">134</a></th><td></td></tr><tr><th id="L135"><a href="#L135">135</a></th><td>        tail = this.root = null;</td></tr><tr><th id="L136"><a href="#L136">136</a></th><td>        for(i = 0; i &lt; c.length; i++)</td></tr><tr><th id="L137"><a href="#L137">137</a></th><td>            c[i] = 0;</td></tr><tr><th id="L138"><a href="#L138">138</a></th><td>        for(i = 0; i &lt; lx.length; i++)</td></tr><tr><th id="L139"><a href="#L139">139</a></th><td>            lx[i] = 0;</td></tr><tr><th id="L140"><a href="#L140">140</a></th><td>        for(i = 0; i &lt; u.length; i++)</td></tr><tr><th id="L141"><a href="#L141">141</a></th><td>            u[i] = null;</td></tr><tr><th id="L142"><a href="#L142">142</a></th><td>        for(i = 0; i &lt; v.length; i++)</td></tr><tr><th id="L143"><a href="#L143">143</a></th><td>            v[i] = 0;</td></tr><tr><th id="L144"><a href="#L144">144</a></th><td>        for(i = 0; i &lt; x.length; i++)</td></tr><tr><th id="L145"><a href="#L145">145</a></th><td>            x[i] = 0;</td></tr><tr><th id="L146"><a href="#L146">146</a></th><td></td></tr><tr><th id="L147"><a href="#L147">147</a></th><td>        // Generate counts for each bit length</td></tr><tr><th id="L148"><a href="#L148">148</a></th><td>        el = n &gt; 256 ? b[256] : this.BMAX; // set length of EOB code, if any</td></tr><tr><th id="L149"><a href="#L149">149</a></th><td>        p = b; pidx = 0;</td></tr><tr><th id="L150"><a href="#L150">150</a></th><td>        i = n;</td></tr><tr><th id="L151"><a href="#L151">151</a></th><td>        do {</td></tr><tr><th id="L152"><a href="#L152">152</a></th><td>            c[p[pidx]]++;       // assume all entries &lt;= BMAX</td></tr><tr><th id="L153"><a href="#L153">153</a></th><td>            pidx++;</td></tr><tr><th id="L154"><a href="#L154">154</a></th><td>        } while(--i &gt; 0);</td></tr><tr><th id="L155"><a href="#L155">155</a></th><td>        if(c[0] == n) { // null input--all zero length codes</td></tr><tr><th id="L156"><a href="#L156">156</a></th><td>            this.root = null;</td></tr><tr><th id="L157"><a href="#L157">157</a></th><td>            this.m = 0;</td></tr><tr><th id="L158"><a href="#L158">158</a></th><td>            this.status = 0;</td></tr><tr><th id="L159"><a href="#L159">159</a></th><td>            return;</td></tr><tr><th id="L160"><a href="#L160">160</a></th><td>        }</td></tr><tr><th id="L161"><a href="#L161">161</a></th><td></td></tr><tr><th id="L162"><a href="#L162">162</a></th><td>        // Find minimum and maximum length, bound *m by those</td></tr><tr><th id="L163"><a href="#L163">163</a></th><td>        for(j = 1; j &lt;= this.BMAX; j++)</td></tr><tr><th id="L164"><a href="#L164">164</a></th><td>            if(c[j] != 0)</td></tr><tr><th id="L165"><a href="#L165">165</a></th><td>                break;</td></tr><tr><th id="L166"><a href="#L166">166</a></th><td>        k = j;                  // minimum code length</td></tr><tr><th id="L167"><a href="#L167">167</a></th><td>        if(mm &lt; j)</td></tr><tr><th id="L168"><a href="#L168">168</a></th><td>            mm = j;</td></tr><tr><th id="L169"><a href="#L169">169</a></th><td>        for(i = this.BMAX; i != 0; i--)</td></tr><tr><th id="L170"><a href="#L170">170</a></th><td>            if(c[i] != 0)</td></tr><tr><th id="L171"><a href="#L171">171</a></th><td>                break;</td></tr><tr><th id="L172"><a href="#L172">172</a></th><td>        g = i;                  // maximum code length</td></tr><tr><th id="L173"><a href="#L173">173</a></th><td>        if(mm &gt; i)</td></tr><tr><th id="L174"><a href="#L174">174</a></th><td>            mm = i;</td></tr><tr><th id="L175"><a href="#L175">175</a></th><td></td></tr><tr><th id="L176"><a href="#L176">176</a></th><td>        // Adjust last length count to fill out codes, if needed</td></tr><tr><th id="L177"><a href="#L177">177</a></th><td>        for(y = 1 &lt;&lt; j; j &lt; i; j++, y &lt;&lt;= 1)</td></tr><tr><th id="L178"><a href="#L178">178</a></th><td>            if((y -= c[j]) &lt; 0) {</td></tr><tr><th id="L179"><a href="#L179">179</a></th><td>                this.status = 2;        // bad input: more codes than bits</td></tr><tr><th id="L180"><a href="#L180">180</a></th><td>                this.m = mm;</td></tr><tr><th id="L181"><a href="#L181">181</a></th><td>                return;</td></tr><tr><th id="L182"><a href="#L182">182</a></th><td>            }</td></tr><tr><th id="L183"><a href="#L183">183</a></th><td>        if((y -= c[i]) &lt; 0) {</td></tr><tr><th id="L184"><a href="#L184">184</a></th><td>            this.status = 2;</td></tr><tr><th id="L185"><a href="#L185">185</a></th><td>            this.m = mm;</td></tr><tr><th id="L186"><a href="#L186">186</a></th><td>            return;</td></tr><tr><th id="L187"><a href="#L187">187</a></th><td>        }</td></tr><tr><th id="L188"><a href="#L188">188</a></th><td>        c[i] += y;</td></tr><tr><th id="L189"><a href="#L189">189</a></th><td></td></tr><tr><th id="L190"><a href="#L190">190</a></th><td>        // Generate starting offsets into the value table for each length</td></tr><tr><th id="L191"><a href="#L191">191</a></th><td>        x[1] = j = 0;</td></tr><tr><th id="L192"><a href="#L192">192</a></th><td>        p = c;</td></tr><tr><th id="L193"><a href="#L193">193</a></th><td>        pidx = 1;</td></tr><tr><th id="L194"><a href="#L194">194</a></th><td>        xp = 2;</td></tr><tr><th id="L195"><a href="#L195">195</a></th><td>        while(--i &gt; 0)          // note that i == g from above</td></tr><tr><th id="L196"><a href="#L196">196</a></th><td>            x[xp++] = (j += p[pidx++]);</td></tr><tr><th id="L197"><a href="#L197">197</a></th><td></td></tr><tr><th id="L198"><a href="#L198">198</a></th><td>        // Make a table of values in order of bit lengths</td></tr><tr><th id="L199"><a href="#L199">199</a></th><td>        p = b; pidx = 0;</td></tr><tr><th id="L200"><a href="#L200">200</a></th><td>        i = 0;</td></tr><tr><th id="L201"><a href="#L201">201</a></th><td>        do {</td></tr><tr><th id="L202"><a href="#L202">202</a></th><td>            if((j = p[pidx++]) != 0)</td></tr><tr><th id="L203"><a href="#L203">203</a></th><td>                v[x[j]++] = i;</td></tr><tr><th id="L204"><a href="#L204">204</a></th><td>        } while(++i &lt; n);</td></tr><tr><th id="L205"><a href="#L205">205</a></th><td>        n = x[g];                       // set n to length of v</td></tr><tr><th id="L206"><a href="#L206">206</a></th><td></td></tr><tr><th id="L207"><a href="#L207">207</a></th><td>        // Generate the Huffman codes and for each, make the table entries</td></tr><tr><th id="L208"><a href="#L208">208</a></th><td>        x[0] = i = 0;           // first Huffman code is zero</td></tr><tr><th id="L209"><a href="#L209">209</a></th><td>        p = v; pidx = 0;                // grab values in bit order</td></tr><tr><th id="L210"><a href="#L210">210</a></th><td>        h = -1;                 // no tables yet--level -1</td></tr><tr><th id="L211"><a href="#L211">211</a></th><td>        w = lx[0] = 0;          // no bits decoded yet</td></tr><tr><th id="L212"><a href="#L212">212</a></th><td>        q = null;                       // ditto</td></tr><tr><th id="L213"><a href="#L213">213</a></th><td>        z = 0;                  // ditto</td></tr><tr><th id="L214"><a href="#L214">214</a></th><td></td></tr><tr><th id="L215"><a href="#L215">215</a></th><td>        // go through the bit lengths (k already is bits in shortest code)</td></tr><tr><th id="L216"><a href="#L216">216</a></th><td>        for(; k &lt;= g; k++) {</td></tr><tr><th id="L217"><a href="#L217">217</a></th><td>            a = c[k];</td></tr><tr><th id="L218"><a href="#L218">218</a></th><td>            while(a-- &gt; 0) {</td></tr><tr><th id="L219"><a href="#L219">219</a></th><td>                // here i is the Huffman code of length k bits for value p[pidx]</td></tr><tr><th id="L220"><a href="#L220">220</a></th><td>                // make tables up to required level</td></tr><tr><th id="L221"><a href="#L221">221</a></th><td>                while(k &gt; w + lx[1 + h]) {</td></tr><tr><th id="L222"><a href="#L222">222</a></th><td>                    w += lx[1 + h]; // add bits already decoded</td></tr><tr><th id="L223"><a href="#L223">223</a></th><td>                    h++;</td></tr><tr><th id="L224"><a href="#L224">224</a></th><td></td></tr><tr><th id="L225"><a href="#L225">225</a></th><td>                    // compute minimum size table less than or equal to *m bits</td></tr><tr><th id="L226"><a href="#L226">226</a></th><td>                    z = (z = g - w) &gt; mm ? mm : z; // upper limit</td></tr><tr><th id="L227"><a href="#L227">227</a></th><td>                    if((f = 1 &lt;&lt; (j = k - w)) &gt; a + 1) { // try a k-w bit table</td></tr><tr><th id="L228"><a href="#L228">228</a></th><td>                        // too few codes for k-w bit table</td></tr><tr><th id="L229"><a href="#L229">229</a></th><td>                        f -= a + 1;     // deduct codes from patterns left</td></tr><tr><th id="L230"><a href="#L230">230</a></th><td>                        xp = k;</td></tr><tr><th id="L231"><a href="#L231">231</a></th><td>                        while(++j &lt; z) { // try smaller tables up to z bits</td></tr><tr><th id="L232"><a href="#L232">232</a></th><td>                            if((f &lt;&lt;= 1) &lt;= c[++xp])</td></tr><tr><th id="L233"><a href="#L233">233</a></th><td>                                break;  // enough codes to use up j bits</td></tr><tr><th id="L234"><a href="#L234">234</a></th><td>                            f -= c[xp]; // else deduct codes from patterns</td></tr><tr><th id="L235"><a href="#L235">235</a></th><td>                        }</td></tr><tr><th id="L236"><a href="#L236">236</a></th><td>                    }</td></tr><tr><th id="L237"><a href="#L237">237</a></th><td>                    if(w + j &gt; el &amp;&amp; w &lt; el)</td></tr><tr><th id="L238"><a href="#L238">238</a></th><td>                        j = el - w;     // make EOB code end at table</td></tr><tr><th id="L239"><a href="#L239">239</a></th><td>                    z = 1 &lt;&lt; j; // table entries for j-bit table</td></tr><tr><th id="L240"><a href="#L240">240</a></th><td>                    lx[1 + h] = j; // set table size in stack</td></tr><tr><th id="L241"><a href="#L241">241</a></th><td></td></tr><tr><th id="L242"><a href="#L242">242</a></th><td>                    // allocate and link in new table</td></tr><tr><th id="L243"><a href="#L243">243</a></th><td>                    q = new Array(z);</td></tr><tr><th id="L244"><a href="#L244">244</a></th><td>                    for(o = 0; o &lt; z; o++) {</td></tr><tr><th id="L245"><a href="#L245">245</a></th><td>                        q[o] = new zip_HuftNode();</td></tr><tr><th id="L246"><a href="#L246">246</a></th><td>                    }</td></tr><tr><th id="L247"><a href="#L247">247</a></th><td></td></tr><tr><th id="L248"><a href="#L248">248</a></th><td>                    if(tail == null)</td></tr><tr><th id="L249"><a href="#L249">249</a></th><td>                        tail = this.root = new zip_HuftList();</td></tr><tr><th id="L250"><a href="#L250">250</a></th><td>                    else</td></tr><tr><th id="L251"><a href="#L251">251</a></th><td>                        tail = tail.next = new zip_HuftList();</td></tr><tr><th id="L252"><a href="#L252">252</a></th><td>                    tail.next = null;</td></tr><tr><th id="L253"><a href="#L253">253</a></th><td>                    tail.list = q;</td></tr><tr><th id="L254"><a href="#L254">254</a></th><td>                    u[h] = q;   // table starts after link</td></tr><tr><th id="L255"><a href="#L255">255</a></th><td></td></tr><tr><th id="L256"><a href="#L256">256</a></th><td>                    /* connect to last table, if there is one */</td></tr><tr><th id="L257"><a href="#L257">257</a></th><td>                    if(h &gt; 0) {</td></tr><tr><th id="L258"><a href="#L258">258</a></th><td>                        x[h] = i;               // save pattern for backing up</td></tr><tr><th id="L259"><a href="#L259">259</a></th><td>                        r.b = lx[h];    // bits to dump before this table</td></tr><tr><th id="L260"><a href="#L260">260</a></th><td>                        r.e = 16 + j;   // bits in this table</td></tr><tr><th id="L261"><a href="#L261">261</a></th><td>                        r.t = q;                // pointer to this table</td></tr><tr><th id="L262"><a href="#L262">262</a></th><td>                        j = (i &amp; ((1 &lt;&lt; w) - 1)) &gt;&gt; (w - lx[h]);</td></tr><tr><th id="L263"><a href="#L263">263</a></th><td>                        u[h-1][j].e = r.e;</td></tr><tr><th id="L264"><a href="#L264">264</a></th><td>                        u[h-1][j].b = r.b;</td></tr><tr><th id="L265"><a href="#L265">265</a></th><td>                        u[h-1][j].n = r.n;</td></tr><tr><th id="L266"><a href="#L266">266</a></th><td>                        u[h-1][j].t = r.t;</td></tr><tr><th id="L267"><a href="#L267">267</a></th><td>                    }</td></tr><tr><th id="L268"><a href="#L268">268</a></th><td>                }</td></tr><tr><th id="L269"><a href="#L269">269</a></th><td></td></tr><tr><th id="L270"><a href="#L270">270</a></th><td>                // set up table entry in r</td></tr><tr><th id="L271"><a href="#L271">271</a></th><td>                r.b = k - w;</td></tr><tr><th id="L272"><a href="#L272">272</a></th><td>                if(pidx &gt;= n)</td></tr><tr><th id="L273"><a href="#L273">273</a></th><td>                    r.e = 99;           // out of values--invalid code</td></tr><tr><th id="L274"><a href="#L274">274</a></th><td>                else if(p[pidx] &lt; s) {</td></tr><tr><th id="L275"><a href="#L275">275</a></th><td>                    r.e = (p[pidx] &lt; 256 ? 16 : 15); // 256 is end-of-block code</td></tr><tr><th id="L276"><a href="#L276">276</a></th><td>                    r.n = p[pidx++];    // simple code is just the value</td></tr><tr><th id="L277"><a href="#L277">277</a></th><td>                } else {</td></tr><tr><th id="L278"><a href="#L278">278</a></th><td>                    r.e = e[p[pidx] - s];       // non-simple--look up in lists</td></tr><tr><th id="L279"><a href="#L279">279</a></th><td>                    r.n = d[p[pidx++] - s];</td></tr><tr><th id="L280"><a href="#L280">280</a></th><td>                }</td></tr><tr><th id="L281"><a href="#L281">281</a></th><td></td></tr><tr><th id="L282"><a href="#L282">282</a></th><td>                // fill code-like entries with r //</td></tr><tr><th id="L283"><a href="#L283">283</a></th><td>                f = 1 &lt;&lt; (k - w);</td></tr><tr><th id="L284"><a href="#L284">284</a></th><td>                for(j = i &gt;&gt; w; j &lt; z; j += f) {</td></tr><tr><th id="L285"><a href="#L285">285</a></th><td>                    q[j].e = r.e;</td></tr><tr><th id="L286"><a href="#L286">286</a></th><td>                    q[j].b = r.b;</td></tr><tr><th id="L287"><a href="#L287">287</a></th><td>                    q[j].n = r.n;</td></tr><tr><th id="L288"><a href="#L288">288</a></th><td>                    q[j].t = r.t;</td></tr><tr><th id="L289"><a href="#L289">289</a></th><td>                }</td></tr><tr><th id="L290"><a href="#L290">290</a></th><td></td></tr><tr><th id="L291"><a href="#L291">291</a></th><td>                // backwards increment the k-bit code i</td></tr><tr><th id="L292"><a href="#L292">292</a></th><td>                for(j = 1 &lt;&lt; (k - 1); (i &amp; j) != 0; j &gt;&gt;= 1)</td></tr><tr><th id="L293"><a href="#L293">293</a></th><td>                    i ^= j;</td></tr><tr><th id="L294"><a href="#L294">294</a></th><td>                i ^= j;</td></tr><tr><th id="L295"><a href="#L295">295</a></th><td></td></tr><tr><th id="L296"><a href="#L296">296</a></th><td>                // backup over finished tables</td></tr><tr><th id="L297"><a href="#L297">297</a></th><td>                while((i &amp; ((1 &lt;&lt; w) - 1)) != x[h]) {</td></tr><tr><th id="L298"><a href="#L298">298</a></th><td>                    w -= lx[h];         // don't need to update q</td></tr><tr><th id="L299"><a href="#L299">299</a></th><td>                    h--;</td></tr><tr><th id="L300"><a href="#L300">300</a></th><td>                }</td></tr><tr><th id="L301"><a href="#L301">301</a></th><td>            }</td></tr><tr><th id="L302"><a href="#L302">302</a></th><td>        }</td></tr><tr><th id="L303"><a href="#L303">303</a></th><td></td></tr><tr><th id="L304"><a href="#L304">304</a></th><td>        /* return actual size of base table */</td></tr><tr><th id="L305"><a href="#L305">305</a></th><td>        this.m = lx[1];</td></tr><tr><th id="L306"><a href="#L306">306</a></th><td></td></tr><tr><th id="L307"><a href="#L307">307</a></th><td>        /* Return true (1) if we were given an incomplete table */</td></tr><tr><th id="L308"><a href="#L308">308</a></th><td>        this.status = ((y != 0 &amp;&amp; g != 1) ? 1 : 0);</td></tr><tr><th id="L309"><a href="#L309">309</a></th><td>    } /* end of constructor */</td></tr><tr><th id="L310"><a href="#L310">310</a></th><td>}</td></tr><tr><th id="L311"><a href="#L311">311</a></th><td></td></tr><tr><th id="L312"><a href="#L312">312</a></th><td></td></tr><tr><th id="L313"><a href="#L313">313</a></th><td>/* routines (inflate) */</td></tr><tr><th id="L314"><a href="#L314">314</a></th><td></td></tr><tr><th id="L315"><a href="#L315">315</a></th><td>var zip_GET_BYTE = function() {</td></tr><tr><th id="L316"><a href="#L316">316</a></th><td>    if(zip_inflate_data.length == zip_inflate_pos)</td></tr><tr><th id="L317"><a href="#L317">317</a></th><td>        return -1;</td></tr><tr><th id="L318"><a href="#L318">318</a></th><td>    return zip_inflate_data.charCodeAt(zip_inflate_pos++) &amp; 0xff;</td></tr><tr><th id="L319"><a href="#L319">319</a></th><td>}</td></tr><tr><th id="L320"><a href="#L320">320</a></th><td></td></tr><tr><th id="L321"><a href="#L321">321</a></th><td>var zip_NEEDBITS = function(n) {</td></tr><tr><th id="L322"><a href="#L322">322</a></th><td>    while(zip_bit_len &lt; n) {</td></tr><tr><th id="L323"><a href="#L323">323</a></th><td>        zip_bit_buf |= zip_GET_BYTE() &lt;&lt; zip_bit_len;</td></tr><tr><th id="L324"><a href="#L324">324</a></th><td>        zip_bit_len += 8;</td></tr><tr><th id="L325"><a href="#L325">325</a></th><td>    }</td></tr><tr><th id="L326"><a href="#L326">326</a></th><td>}</td></tr><tr><th id="L327"><a href="#L327">327</a></th><td></td></tr><tr><th id="L328"><a href="#L328">328</a></th><td>var zip_GETBITS = function(n) {</td></tr><tr><th id="L329"><a href="#L329">329</a></th><td>    return zip_bit_buf &amp; zip_MASK_BITS[n];</td></tr><tr><th id="L330"><a href="#L330">330</a></th><td>}</td></tr><tr><th id="L331"><a href="#L331">331</a></th><td></td></tr><tr><th id="L332"><a href="#L332">332</a></th><td>var zip_DUMPBITS = function(n) {</td></tr><tr><th id="L333"><a href="#L333">333</a></th><td>    zip_bit_buf &gt;&gt;= n;</td></tr><tr><th id="L334"><a href="#L334">334</a></th><td>    zip_bit_len -= n;</td></tr><tr><th id="L335"><a href="#L335">335</a></th><td>}</td></tr><tr><th id="L336"><a href="#L336">336</a></th><td></td></tr><tr><th id="L337"><a href="#L337">337</a></th><td>var zip_inflate_codes = function(buff, off, size) {</td></tr><tr><th id="L338"><a href="#L338">338</a></th><td>    /* inflate (decompress) the codes in a deflated (compressed) block.</td></tr><tr><th id="L339"><a href="#L339">339</a></th><td>       Return an error code or zero if it all goes ok. */</td></tr><tr><th id="L340"><a href="#L340">340</a></th><td>    var e;              // table entry flag/number of extra bits</td></tr><tr><th id="L341"><a href="#L341">341</a></th><td>    var t;              // (zip_HuftNode) pointer to table entry</td></tr><tr><th id="L342"><a href="#L342">342</a></th><td>    var n;</td></tr><tr><th id="L343"><a href="#L343">343</a></th><td></td></tr><tr><th id="L344"><a href="#L344">344</a></th><td>    if(size == 0)</td></tr><tr><th id="L345"><a href="#L345">345</a></th><td>      return 0;</td></tr><tr><th id="L346"><a href="#L346">346</a></th><td></td></tr><tr><th id="L347"><a href="#L347">347</a></th><td>    // inflate the coded data</td></tr><tr><th id="L348"><a href="#L348">348</a></th><td>    n = 0;</td></tr><tr><th id="L349"><a href="#L349">349</a></th><td>    for(;;) {                   // do until end of block</td></tr><tr><th id="L350"><a href="#L350">350</a></th><td>        zip_NEEDBITS(zip_bl);</td></tr><tr><th id="L351"><a href="#L351">351</a></th><td>        t = zip_tl.list[zip_GETBITS(zip_bl)];</td></tr><tr><th id="L352"><a href="#L352">352</a></th><td>        e = t.e;</td></tr><tr><th id="L353"><a href="#L353">353</a></th><td>        while(e &gt; 16) {</td></tr><tr><th id="L354"><a href="#L354">354</a></th><td>            if(e == 99)</td></tr><tr><th id="L355"><a href="#L355">355</a></th><td>                return -1;</td></tr><tr><th id="L356"><a href="#L356">356</a></th><td>            zip_DUMPBITS(t.b);</td></tr><tr><th id="L357"><a href="#L357">357</a></th><td>            e -= 16;</td></tr><tr><th id="L358"><a href="#L358">358</a></th><td>            zip_NEEDBITS(e);</td></tr><tr><th id="L359"><a href="#L359">359</a></th><td>            t = t.t[zip_GETBITS(e)];</td></tr><tr><th id="L360"><a href="#L360">360</a></th><td>            e = t.e;</td></tr><tr><th id="L361"><a href="#L361">361</a></th><td>        }</td></tr><tr><th id="L362"><a href="#L362">362</a></th><td>        zip_DUMPBITS(t.b);</td></tr><tr><th id="L363"><a href="#L363">363</a></th><td></td></tr><tr><th id="L364"><a href="#L364">364</a></th><td>        if(e == 16) {           // then it's a literal</td></tr><tr><th id="L365"><a href="#L365">365</a></th><td>            zip_wp &amp;= zip_WSIZE - 1;</td></tr><tr><th id="L366"><a href="#L366">366</a></th><td>            buff[off + n++] = zip_slide[zip_wp++] = t.n;</td></tr><tr><th id="L367"><a href="#L367">367</a></th><td>            if(n == size)</td></tr><tr><th id="L368"><a href="#L368">368</a></th><td>                return size;</td></tr><tr><th id="L369"><a href="#L369">369</a></th><td>            continue;</td></tr><tr><th id="L370"><a href="#L370">370</a></th><td>        }</td></tr><tr><th id="L371"><a href="#L371">371</a></th><td></td></tr><tr><th id="L372"><a href="#L372">372</a></th><td>        // exit if end of block</td></tr><tr><th id="L373"><a href="#L373">373</a></th><td>        if(e == 15)</td></tr><tr><th id="L374"><a href="#L374">374</a></th><td>            break;</td></tr><tr><th id="L375"><a href="#L375">375</a></th><td></td></tr><tr><th id="L376"><a href="#L376">376</a></th><td>        // it's an EOB or a length</td></tr><tr><th id="L377"><a href="#L377">377</a></th><td></td></tr><tr><th id="L378"><a href="#L378">378</a></th><td>        // get length of block to copy</td></tr><tr><th id="L379"><a href="#L379">379</a></th><td>        zip_NEEDBITS(e);</td></tr><tr><th id="L380"><a href="#L380">380</a></th><td>        zip_copy_leng = t.n + zip_GETBITS(e);</td></tr><tr><th id="L381"><a href="#L381">381</a></th><td>        zip_DUMPBITS(e);</td></tr><tr><th id="L382"><a href="#L382">382</a></th><td></td></tr><tr><th id="L383"><a href="#L383">383</a></th><td>        // decode distance of block to copy</td></tr><tr><th id="L384"><a href="#L384">384</a></th><td>        zip_NEEDBITS(zip_bd);</td></tr><tr><th id="L385"><a href="#L385">385</a></th><td>        t = zip_td.list[zip_GETBITS(zip_bd)];</td></tr><tr><th id="L386"><a href="#L386">386</a></th><td>        e = t.e;</td></tr><tr><th id="L387"><a href="#L387">387</a></th><td></td></tr><tr><th id="L388"><a href="#L388">388</a></th><td>        while(e &gt; 16) {</td></tr><tr><th id="L389"><a href="#L389">389</a></th><td>            if(e == 99)</td></tr><tr><th id="L390"><a href="#L390">390</a></th><td>                return -1;</td></tr><tr><th id="L391"><a href="#L391">391</a></th><td>            zip_DUMPBITS(t.b);</td></tr><tr><th id="L392"><a href="#L392">392</a></th><td>            e -= 16;</td></tr><tr><th id="L393"><a href="#L393">393</a></th><td>            zip_NEEDBITS(e);</td></tr><tr><th id="L394"><a href="#L394">394</a></th><td>            t = t.t[zip_GETBITS(e)];</td></tr><tr><th id="L395"><a href="#L395">395</a></th><td>            e = t.e;</td></tr><tr><th id="L396"><a href="#L396">396</a></th><td>        }</td></tr><tr><th id="L397"><a href="#L397">397</a></th><td>        zip_DUMPBITS(t.b);</td></tr><tr><th id="L398"><a href="#L398">398</a></th><td>        zip_NEEDBITS(e);</td></tr><tr><th id="L399"><a href="#L399">399</a></th><td>        zip_copy_dist = zip_wp - t.n - zip_GETBITS(e);</td></tr><tr><th id="L400"><a href="#L400">400</a></th><td>        zip_DUMPBITS(e);</td></tr><tr><th id="L401"><a href="#L401">401</a></th><td></td></tr><tr><th id="L402"><a href="#L402">402</a></th><td>        // do the copy</td></tr><tr><th id="L403"><a href="#L403">403</a></th><td>        while(zip_copy_leng &gt; 0 &amp;&amp; n &lt; size) {</td></tr><tr><th id="L404"><a href="#L404">404</a></th><td>            zip_copy_leng--;</td></tr><tr><th id="L405"><a href="#L405">405</a></th><td>            zip_copy_dist &amp;= zip_WSIZE - 1;</td></tr><tr><th id="L406"><a href="#L406">406</a></th><td>            zip_wp &amp;= zip_WSIZE - 1;</td></tr><tr><th id="L407"><a href="#L407">407</a></th><td>            buff[off + n++] = zip_slide[zip_wp++]</td></tr><tr><th id="L408"><a href="#L408">408</a></th><td>                = zip_slide[zip_copy_dist++];</td></tr><tr><th id="L409"><a href="#L409">409</a></th><td>        }</td></tr><tr><th id="L410"><a href="#L410">410</a></th><td></td></tr><tr><th id="L411"><a href="#L411">411</a></th><td>        if(n == size)</td></tr><tr><th id="L412"><a href="#L412">412</a></th><td>            return size;</td></tr><tr><th id="L413"><a href="#L413">413</a></th><td>    }</td></tr><tr><th id="L414"><a href="#L414">414</a></th><td></td></tr><tr><th id="L415"><a href="#L415">415</a></th><td>    zip_method = -1; // done</td></tr><tr><th id="L416"><a href="#L416">416</a></th><td>    return n;</td></tr><tr><th id="L417"><a href="#L417">417</a></th><td>}</td></tr><tr><th id="L418"><a href="#L418">418</a></th><td></td></tr><tr><th id="L419"><a href="#L419">419</a></th><td>var zip_inflate_stored = function(buff, off, size) {</td></tr><tr><th id="L420"><a href="#L420">420</a></th><td>    /* "decompress" an inflated type 0 (stored) block. */</td></tr><tr><th id="L421"><a href="#L421">421</a></th><td>    var n;</td></tr><tr><th id="L422"><a href="#L422">422</a></th><td></td></tr><tr><th id="L423"><a href="#L423">423</a></th><td>    // go to byte boundary</td></tr><tr><th id="L424"><a href="#L424">424</a></th><td>    n = zip_bit_len &amp; 7;</td></tr><tr><th id="L425"><a href="#L425">425</a></th><td>    zip_DUMPBITS(n);</td></tr><tr><th id="L426"><a href="#L426">426</a></th><td></td></tr><tr><th id="L427"><a href="#L427">427</a></th><td>    // get the length and its complement</td></tr><tr><th id="L428"><a href="#L428">428</a></th><td>    zip_NEEDBITS(16);</td></tr><tr><th id="L429"><a href="#L429">429</a></th><td>    n = zip_GETBITS(16);</td></tr><tr><th id="L430"><a href="#L430">430</a></th><td>    zip_DUMPBITS(16);</td></tr><tr><th id="L431"><a href="#L431">431</a></th><td>    zip_NEEDBITS(16);</td></tr><tr><th id="L432"><a href="#L432">432</a></th><td>    if(n != ((~zip_bit_buf) &amp; 0xffff))</td></tr><tr><th id="L433"><a href="#L433">433</a></th><td>        return -1;                      // error in compressed data</td></tr><tr><th id="L434"><a href="#L434">434</a></th><td>    zip_DUMPBITS(16);</td></tr><tr><th id="L435"><a href="#L435">435</a></th><td></td></tr><tr><th id="L436"><a href="#L436">436</a></th><td>    // read and output the compressed data</td></tr><tr><th id="L437"><a href="#L437">437</a></th><td>    zip_copy_leng = n;</td></tr><tr><th id="L438"><a href="#L438">438</a></th><td></td></tr><tr><th id="L439"><a href="#L439">439</a></th><td>    n = 0;</td></tr><tr><th id="L440"><a href="#L440">440</a></th><td>    while(zip_copy_leng &gt; 0 &amp;&amp; n &lt; size) {</td></tr><tr><th id="L441"><a href="#L441">441</a></th><td>        zip_copy_leng--;</td></tr><tr><th id="L442"><a href="#L442">442</a></th><td>        zip_wp &amp;= zip_WSIZE - 1;</td></tr><tr><th id="L443"><a href="#L443">443</a></th><td>        zip_NEEDBITS(8);</td></tr><tr><th id="L444"><a href="#L444">444</a></th><td>        buff[off + n++] = zip_slide[zip_wp++] =</td></tr><tr><th id="L445"><a href="#L445">445</a></th><td>            zip_GETBITS(8);</td></tr><tr><th id="L446"><a href="#L446">446</a></th><td>        zip_DUMPBITS(8);</td></tr><tr><th id="L447"><a href="#L447">447</a></th><td>    }</td></tr><tr><th id="L448"><a href="#L448">448</a></th><td></td></tr><tr><th id="L449"><a href="#L449">449</a></th><td>    if(zip_copy_leng == 0)</td></tr><tr><th id="L450"><a href="#L450">450</a></th><td>      zip_method = -1; // done</td></tr><tr><th id="L451"><a href="#L451">451</a></th><td>    return n;</td></tr><tr><th id="L452"><a href="#L452">452</a></th><td>}</td></tr><tr><th id="L453"><a href="#L453">453</a></th><td></td></tr><tr><th id="L454"><a href="#L454">454</a></th><td>var zip_inflate_fixed = function(buff, off, size) {</td></tr><tr><th id="L455"><a href="#L455">455</a></th><td>    /* decompress an inflated type 1 (fixed Huffman codes) block.  We should</td></tr><tr><th id="L456"><a href="#L456">456</a></th><td>       either replace this with a custom decoder, or at least precompute the</td></tr><tr><th id="L457"><a href="#L457">457</a></th><td>       Huffman tables. */</td></tr><tr><th id="L458"><a href="#L458">458</a></th><td></td></tr><tr><th id="L459"><a href="#L459">459</a></th><td>    // if first time, set up tables for fixed blocks</td></tr><tr><th id="L460"><a href="#L460">460</a></th><td>    if(zip_fixed_tl == null) {</td></tr><tr><th id="L461"><a href="#L461">461</a></th><td>        var i;                  // temporary variable</td></tr><tr><th id="L462"><a href="#L462">462</a></th><td>        var l = new Array(288); // length list for huft_build</td></tr><tr><th id="L463"><a href="#L463">463</a></th><td>        var h;  // zip_HuftBuild</td></tr><tr><th id="L464"><a href="#L464">464</a></th><td></td></tr><tr><th id="L465"><a href="#L465">465</a></th><td>        // literal table</td></tr><tr><th id="L466"><a href="#L466">466</a></th><td>        for(i = 0; i &lt; 144; i++)</td></tr><tr><th id="L467"><a href="#L467">467</a></th><td>            l[i] = 8;</td></tr><tr><th id="L468"><a href="#L468">468</a></th><td>        for(; i &lt; 256; i++)</td></tr><tr><th id="L469"><a href="#L469">469</a></th><td>            l[i] = 9;</td></tr><tr><th id="L470"><a href="#L470">470</a></th><td>        for(; i &lt; 280; i++)</td></tr><tr><th id="L471"><a href="#L471">471</a></th><td>            l[i] = 7;</td></tr><tr><th id="L472"><a href="#L472">472</a></th><td>        for(; i &lt; 288; i++)     // make a complete, but wrong code set</td></tr><tr><th id="L473"><a href="#L473">473</a></th><td>            l[i] = 8;</td></tr><tr><th id="L474"><a href="#L474">474</a></th><td>        zip_fixed_bl = 7;</td></tr><tr><th id="L475"><a href="#L475">475</a></th><td></td></tr><tr><th id="L476"><a href="#L476">476</a></th><td>        h = new zip_HuftBuild(l, 288, 257, zip_cplens, zip_cplext,</td></tr><tr><th id="L477"><a href="#L477">477</a></th><td>                              zip_fixed_bl);</td></tr><tr><th id="L478"><a href="#L478">478</a></th><td>        if(h.status != 0) {</td></tr><tr><th id="L479"><a href="#L479">479</a></th><td>            alert("HufBuild error: "+h.status);</td></tr><tr><th id="L480"><a href="#L480">480</a></th><td>            return -1;</td></tr><tr><th id="L481"><a href="#L481">481</a></th><td>        }</td></tr><tr><th id="L482"><a href="#L482">482</a></th><td>        zip_fixed_tl = h.root;</td></tr><tr><th id="L483"><a href="#L483">483</a></th><td>        zip_fixed_bl = h.m;</td></tr><tr><th id="L484"><a href="#L484">484</a></th><td></td></tr><tr><th id="L485"><a href="#L485">485</a></th><td>        // distance table</td></tr><tr><th id="L486"><a href="#L486">486</a></th><td>        for(i = 0; i &lt; 30; i++) // make an incomplete code set</td></tr><tr><th id="L487"><a href="#L487">487</a></th><td>            l[i] = 5;</td></tr><tr><th id="L488"><a href="#L488">488</a></th><td>        zip_fixed_bd = 5;</td></tr><tr><th id="L489"><a href="#L489">489</a></th><td></td></tr><tr><th id="L490"><a href="#L490">490</a></th><td>        h = new zip_HuftBuild(l, 30, 0, zip_cpdist, zip_cpdext, zip_fixed_bd);</td></tr><tr><th id="L491"><a href="#L491">491</a></th><td>        if(h.status &gt; 1) {</td></tr><tr><th id="L492"><a href="#L492">492</a></th><td>            zip_fixed_tl = null;</td></tr><tr><th id="L493"><a href="#L493">493</a></th><td>            alert("HufBuild error: "+h.status);</td></tr><tr><th id="L494"><a href="#L494">494</a></th><td>            return -1;</td></tr><tr><th id="L495"><a href="#L495">495</a></th><td>        }</td></tr><tr><th id="L496"><a href="#L496">496</a></th><td>        zip_fixed_td = h.root;</td></tr><tr><th id="L497"><a href="#L497">497</a></th><td>        zip_fixed_bd = h.m;</td></tr><tr><th id="L498"><a href="#L498">498</a></th><td>    }</td></tr><tr><th id="L499"><a href="#L499">499</a></th><td></td></tr><tr><th id="L500"><a href="#L500">500</a></th><td>    zip_tl = zip_fixed_tl;</td></tr><tr><th id="L501"><a href="#L501">501</a></th><td>    zip_td = zip_fixed_td;</td></tr><tr><th id="L502"><a href="#L502">502</a></th><td>    zip_bl = zip_fixed_bl;</td></tr><tr><th id="L503"><a href="#L503">503</a></th><td>    zip_bd = zip_fixed_bd;</td></tr><tr><th id="L504"><a href="#L504">504</a></th><td>    return zip_inflate_codes(buff, off, size);</td></tr><tr><th id="L505"><a href="#L505">505</a></th><td>}</td></tr><tr><th id="L506"><a href="#L506">506</a></th><td></td></tr><tr><th id="L507"><a href="#L507">507</a></th><td>var zip_inflate_dynamic = function(buff, off, size) {</td></tr><tr><th id="L508"><a href="#L508">508</a></th><td>    // decompress an inflated type 2 (dynamic Huffman codes) block.</td></tr><tr><th id="L509"><a href="#L509">509</a></th><td>    var i;              // temporary variables</td></tr><tr><th id="L510"><a href="#L510">510</a></th><td>    var j;</td></tr><tr><th id="L511"><a href="#L511">511</a></th><td>    var l;              // last length</td></tr><tr><th id="L512"><a href="#L512">512</a></th><td>    var n;              // number of lengths to get</td></tr><tr><th id="L513"><a href="#L513">513</a></th><td>    var t;              // (zip_HuftNode) literal/length code table</td></tr><tr><th id="L514"><a href="#L514">514</a></th><td>    var nb;             // number of bit length codes</td></tr><tr><th id="L515"><a href="#L515">515</a></th><td>    var nl;             // number of literal/length codes</td></tr><tr><th id="L516"><a href="#L516">516</a></th><td>    var nd;             // number of distance codes</td></tr><tr><th id="L517"><a href="#L517">517</a></th><td>    var ll = new Array(286+30); // literal/length and distance code lengths</td></tr><tr><th id="L518"><a href="#L518">518</a></th><td>    var h;              // (zip_HuftBuild)</td></tr><tr><th id="L519"><a href="#L519">519</a></th><td></td></tr><tr><th id="L520"><a href="#L520">520</a></th><td>    for(i = 0; i &lt; ll.length; i++)</td></tr><tr><th id="L521"><a href="#L521">521</a></th><td>        ll[i] = 0;</td></tr><tr><th id="L522"><a href="#L522">522</a></th><td></td></tr><tr><th id="L523"><a href="#L523">523</a></th><td>    // read in table lengths</td></tr><tr><th id="L524"><a href="#L524">524</a></th><td>    zip_NEEDBITS(5);</td></tr><tr><th id="L525"><a href="#L525">525</a></th><td>    nl = 257 + zip_GETBITS(5);  // number of literal/length codes</td></tr><tr><th id="L526"><a href="#L526">526</a></th><td>    zip_DUMPBITS(5);</td></tr><tr><th id="L527"><a href="#L527">527</a></th><td>    zip_NEEDBITS(5);</td></tr><tr><th id="L528"><a href="#L528">528</a></th><td>    nd = 1 + zip_GETBITS(5);    // number of distance codes</td></tr><tr><th id="L529"><a href="#L529">529</a></th><td>    zip_DUMPBITS(5);</td></tr><tr><th id="L530"><a href="#L530">530</a></th><td>    zip_NEEDBITS(4);</td></tr><tr><th id="L531"><a href="#L531">531</a></th><td>    nb = 4 + zip_GETBITS(4);    // number of bit length codes</td></tr><tr><th id="L532"><a href="#L532">532</a></th><td>    zip_DUMPBITS(4);</td></tr><tr><th id="L533"><a href="#L533">533</a></th><td>    if(nl &gt; 286 || nd &gt; 30)</td></tr><tr><th id="L534"><a href="#L534">534</a></th><td>      return -1;                // bad lengths</td></tr><tr><th id="L535"><a href="#L535">535</a></th><td></td></tr><tr><th id="L536"><a href="#L536">536</a></th><td>    // read in bit-length-code lengths</td></tr><tr><th id="L537"><a href="#L537">537</a></th><td>    for(j = 0; j &lt; nb; j++)</td></tr><tr><th id="L538"><a href="#L538">538</a></th><td>    {</td></tr><tr><th id="L539"><a href="#L539">539</a></th><td>        zip_NEEDBITS(3);</td></tr><tr><th id="L540"><a href="#L540">540</a></th><td>        ll[zip_border[j]] = zip_GETBITS(3);</td></tr><tr><th id="L541"><a href="#L541">541</a></th><td>        zip_DUMPBITS(3);</td></tr><tr><th id="L542"><a href="#L542">542</a></th><td>    }</td></tr><tr><th id="L543"><a href="#L543">543</a></th><td>    for(; j &lt; 19; j++)</td></tr><tr><th id="L544"><a href="#L544">544</a></th><td>        ll[zip_border[j]] = 0;</td></tr><tr><th id="L545"><a href="#L545">545</a></th><td></td></tr><tr><th id="L546"><a href="#L546">546</a></th><td>    // build decoding table for trees--single level, 7 bit lookup</td></tr><tr><th id="L547"><a href="#L547">547</a></th><td>    zip_bl = 7;</td></tr><tr><th id="L548"><a href="#L548">548</a></th><td>    h = new zip_HuftBuild(ll, 19, 19, null, null, zip_bl);</td></tr><tr><th id="L549"><a href="#L549">549</a></th><td>    if(h.status != 0)</td></tr><tr><th id="L550"><a href="#L550">550</a></th><td>        return -1;      // incomplete code set</td></tr><tr><th id="L551"><a href="#L551">551</a></th><td></td></tr><tr><th id="L552"><a href="#L552">552</a></th><td>    zip_tl = h.root;</td></tr><tr><th id="L553"><a href="#L553">553</a></th><td>    zip_bl = h.m;</td></tr><tr><th id="L554"><a href="#L554">554</a></th><td></td></tr><tr><th id="L555"><a href="#L555">555</a></th><td>    // read in literal and distance code lengths</td></tr><tr><th id="L556"><a href="#L556">556</a></th><td>    n = nl + nd;</td></tr><tr><th id="L557"><a href="#L557">557</a></th><td>    i = l = 0;</td></tr><tr><th id="L558"><a href="#L558">558</a></th><td>    while(i &lt; n) {</td></tr><tr><th id="L559"><a href="#L559">559</a></th><td>        zip_NEEDBITS(zip_bl);</td></tr><tr><th id="L560"><a href="#L560">560</a></th><td>        t = zip_tl.list[zip_GETBITS(zip_bl)];</td></tr><tr><th id="L561"><a href="#L561">561</a></th><td>        j = t.b;</td></tr><tr><th id="L562"><a href="#L562">562</a></th><td>        zip_DUMPBITS(j);</td></tr><tr><th id="L563"><a href="#L563">563</a></th><td>        j = t.n;</td></tr><tr><th id="L564"><a href="#L564">564</a></th><td>        if(j &lt; 16)              // length of code in bits (0..15)</td></tr><tr><th id="L565"><a href="#L565">565</a></th><td>            ll[i++] = l = j;    // save last length in l</td></tr><tr><th id="L566"><a href="#L566">566</a></th><td>        else if(j == 16) {      // repeat last length 3 to 6 times</td></tr><tr><th id="L567"><a href="#L567">567</a></th><td>            zip_NEEDBITS(2);</td></tr><tr><th id="L568"><a href="#L568">568</a></th><td>            j = 3 + zip_GETBITS(2);</td></tr><tr><th id="L569"><a href="#L569">569</a></th><td>            zip_DUMPBITS(2);</td></tr><tr><th id="L570"><a href="#L570">570</a></th><td>            if(i + j &gt; n)</td></tr><tr><th id="L571"><a href="#L571">571</a></th><td>                return -1;</td></tr><tr><th id="L572"><a href="#L572">572</a></th><td>            while(j-- &gt; 0)</td></tr><tr><th id="L573"><a href="#L573">573</a></th><td>                ll[i++] = l;</td></tr><tr><th id="L574"><a href="#L574">574</a></th><td>        } else if(j == 17) {    // 3 to 10 zero length codes</td></tr><tr><th id="L575"><a href="#L575">575</a></th><td>            zip_NEEDBITS(3);</td></tr><tr><th id="L576"><a href="#L576">576</a></th><td>            j = 3 + zip_GETBITS(3);</td></tr><tr><th id="L577"><a href="#L577">577</a></th><td>            zip_DUMPBITS(3);</td></tr><tr><th id="L578"><a href="#L578">578</a></th><td>            if(i + j &gt; n)</td></tr><tr><th id="L579"><a href="#L579">579</a></th><td>                return -1;</td></tr><tr><th id="L580"><a href="#L580">580</a></th><td>            while(j-- &gt; 0)</td></tr><tr><th id="L581"><a href="#L581">581</a></th><td>                ll[i++] = 0;</td></tr><tr><th id="L582"><a href="#L582">582</a></th><td>            l = 0;</td></tr><tr><th id="L583"><a href="#L583">583</a></th><td>        } else {                // j == 18: 11 to 138 zero length codes</td></tr><tr><th id="L584"><a href="#L584">584</a></th><td>            zip_NEEDBITS(7);</td></tr><tr><th id="L585"><a href="#L585">585</a></th><td>            j = 11 + zip_GETBITS(7);</td></tr><tr><th id="L586"><a href="#L586">586</a></th><td>            zip_DUMPBITS(7);</td></tr><tr><th id="L587"><a href="#L587">587</a></th><td>            if(i + j &gt; n)</td></tr><tr><th id="L588"><a href="#L588">588</a></th><td>                return -1;</td></tr><tr><th id="L589"><a href="#L589">589</a></th><td>            while(j-- &gt; 0)</td></tr><tr><th id="L590"><a href="#L590">590</a></th><td>                ll[i++] = 0;</td></tr><tr><th id="L591"><a href="#L591">591</a></th><td>            l = 0;</td></tr><tr><th id="L592"><a href="#L592">592</a></th><td>        }</td></tr><tr><th id="L593"><a href="#L593">593</a></th><td>    }</td></tr><tr><th id="L594"><a href="#L594">594</a></th><td></td></tr><tr><th id="L595"><a href="#L595">595</a></th><td>    // build the decoding tables for literal/length and distance codes</td></tr><tr><th id="L596"><a href="#L596">596</a></th><td>    zip_bl = zip_lbits;</td></tr><tr><th id="L597"><a href="#L597">597</a></th><td>    h = new zip_HuftBuild(ll, nl, 257, zip_cplens, zip_cplext, zip_bl);</td></tr><tr><th id="L598"><a href="#L598">598</a></th><td>    if(zip_bl == 0)     // no literals or lengths</td></tr><tr><th id="L599"><a href="#L599">599</a></th><td>        h.status = 1;</td></tr><tr><th id="L600"><a href="#L600">600</a></th><td>    if(h.status != 0) {</td></tr><tr><th id="L601"><a href="#L601">601</a></th><td>        if(h.status == 1)</td></tr><tr><th id="L602"><a href="#L602">602</a></th><td>            ;// **incomplete literal tree**</td></tr><tr><th id="L603"><a href="#L603">603</a></th><td>        return -1;              // incomplete code set</td></tr><tr><th id="L604"><a href="#L604">604</a></th><td>    }</td></tr><tr><th id="L605"><a href="#L605">605</a></th><td>    zip_tl = h.root;</td></tr><tr><th id="L606"><a href="#L606">606</a></th><td>    zip_bl = h.m;</td></tr><tr><th id="L607"><a href="#L607">607</a></th><td></td></tr><tr><th id="L608"><a href="#L608">608</a></th><td>    for(i = 0; i &lt; nd; i++)</td></tr><tr><th id="L609"><a href="#L609">609</a></th><td>        ll[i] = ll[i + nl];</td></tr><tr><th id="L610"><a href="#L610">610</a></th><td>    zip_bd = zip_dbits;</td></tr><tr><th id="L611"><a href="#L611">611</a></th><td>    h = new zip_HuftBuild(ll, nd, 0, zip_cpdist, zip_cpdext, zip_bd);</td></tr><tr><th id="L612"><a href="#L612">612</a></th><td>    zip_td = h.root;</td></tr><tr><th id="L613"><a href="#L613">613</a></th><td>    zip_bd = h.m;</td></tr><tr><th id="L614"><a href="#L614">614</a></th><td></td></tr><tr><th id="L615"><a href="#L615">615</a></th><td>    if(zip_bd == 0 &amp;&amp; nl &gt; 257) {   // lengths but no distances</td></tr><tr><th id="L616"><a href="#L616">616</a></th><td>        // **incomplete distance tree**</td></tr><tr><th id="L617"><a href="#L617">617</a></th><td>        return -1;</td></tr><tr><th id="L618"><a href="#L618">618</a></th><td>    }</td></tr><tr><th id="L619"><a href="#L619">619</a></th><td></td></tr><tr><th id="L620"><a href="#L620">620</a></th><td>    if(h.status == 1) {</td></tr><tr><th id="L621"><a href="#L621">621</a></th><td>        ;// **incomplete distance tree**</td></tr><tr><th id="L622"><a href="#L622">622</a></th><td>    }</td></tr><tr><th id="L623"><a href="#L623">623</a></th><td>    if(h.status != 0)</td></tr><tr><th id="L624"><a href="#L624">624</a></th><td>        return -1;</td></tr><tr><th id="L625"><a href="#L625">625</a></th><td></td></tr><tr><th id="L626"><a href="#L626">626</a></th><td>    // decompress until an end-of-block code</td></tr><tr><th id="L627"><a href="#L627">627</a></th><td>    return zip_inflate_codes(buff, off, size);</td></tr><tr><th id="L628"><a href="#L628">628</a></th><td>}</td></tr><tr><th id="L629"><a href="#L629">629</a></th><td></td></tr><tr><th id="L630"><a href="#L630">630</a></th><td>var zip_inflate_start = function() {</td></tr><tr><th id="L631"><a href="#L631">631</a></th><td>    var i;</td></tr><tr><th id="L632"><a href="#L632">632</a></th><td></td></tr><tr><th id="L633"><a href="#L633">633</a></th><td>    if(zip_slide == null)</td></tr><tr><th id="L634"><a href="#L634">634</a></th><td>        zip_slide = new Array(2 * zip_WSIZE);</td></tr><tr><th id="L635"><a href="#L635">635</a></th><td>    zip_wp = 0;</td></tr><tr><th id="L636"><a href="#L636">636</a></th><td>    zip_bit_buf = 0;</td></tr><tr><th id="L637"><a href="#L637">637</a></th><td>    zip_bit_len = 0;</td></tr><tr><th id="L638"><a href="#L638">638</a></th><td>    zip_method = -1;</td></tr><tr><th id="L639"><a href="#L639">639</a></th><td>    zip_eof = false;</td></tr><tr><th id="L640"><a href="#L640">640</a></th><td>    zip_copy_leng = zip_copy_dist = 0;</td></tr><tr><th id="L641"><a href="#L641">641</a></th><td>    zip_tl = null;</td></tr><tr><th id="L642"><a href="#L642">642</a></th><td>}</td></tr><tr><th id="L643"><a href="#L643">643</a></th><td></td></tr><tr><th id="L644"><a href="#L644">644</a></th><td>var zip_inflate_internal = function(buff, off, size) {</td></tr><tr><th id="L645"><a href="#L645">645</a></th><td>    // decompress an inflated entry</td></tr><tr><th id="L646"><a href="#L646">646</a></th><td>    var n, i;</td></tr><tr><th id="L647"><a href="#L647">647</a></th><td></td></tr><tr><th id="L648"><a href="#L648">648</a></th><td>    n = 0;</td></tr><tr><th id="L649"><a href="#L649">649</a></th><td>    while(n &lt; size) {</td></tr><tr><th id="L650"><a href="#L650">650</a></th><td>        if(zip_eof &amp;&amp; zip_method == -1)</td></tr><tr><th id="L651"><a href="#L651">651</a></th><td>            return n;</td></tr><tr><th id="L652"><a href="#L652">652</a></th><td></td></tr><tr><th id="L653"><a href="#L653">653</a></th><td>        if(zip_copy_leng &gt; 0) {</td></tr><tr><th id="L654"><a href="#L654">654</a></th><td>            if(zip_method != zip_STORED_BLOCK) {</td></tr><tr><th id="L655"><a href="#L655">655</a></th><td>                // STATIC_TREES or DYN_TREES</td></tr><tr><th id="L656"><a href="#L656">656</a></th><td>                while(zip_copy_leng &gt; 0 &amp;&amp; n &lt; size) {</td></tr><tr><th id="L657"><a href="#L657">657</a></th><td>                    zip_copy_leng--;</td></tr><tr><th id="L658"><a href="#L658">658</a></th><td>                    zip_copy_dist &amp;= zip_WSIZE - 1;</td></tr><tr><th id="L659"><a href="#L659">659</a></th><td>                    zip_wp &amp;= zip_WSIZE - 1;</td></tr><tr><th id="L660"><a href="#L660">660</a></th><td>                    buff[off + n++] = zip_slide[zip_wp++] =</td></tr><tr><th id="L661"><a href="#L661">661</a></th><td>                        zip_slide[zip_copy_dist++];</td></tr><tr><th id="L662"><a href="#L662">662</a></th><td>                }</td></tr><tr><th id="L663"><a href="#L663">663</a></th><td>            } else {</td></tr><tr><th id="L664"><a href="#L664">664</a></th><td>                while(zip_copy_leng &gt; 0 &amp;&amp; n &lt; size) {</td></tr><tr><th id="L665"><a href="#L665">665</a></th><td>                    zip_copy_leng--;</td></tr><tr><th id="L666"><a href="#L666">666</a></th><td>                    zip_wp &amp;= zip_WSIZE - 1;</td></tr><tr><th id="L667"><a href="#L667">667</a></th><td>                    zip_NEEDBITS(8);</td></tr><tr><th id="L668"><a href="#L668">668</a></th><td>                    buff[off + n++] = zip_slide[zip_wp++] = zip_GETBITS(8);</td></tr><tr><th id="L669"><a href="#L669">669</a></th><td>                    zip_DUMPBITS(8);</td></tr><tr><th id="L670"><a href="#L670">670</a></th><td>                }</td></tr><tr><th id="L671"><a href="#L671">671</a></th><td>                if(zip_copy_leng == 0)</td></tr><tr><th id="L672"><a href="#L672">672</a></th><td>                    zip_method = -1; // done</td></tr><tr><th id="L673"><a href="#L673">673</a></th><td>            }</td></tr><tr><th id="L674"><a href="#L674">674</a></th><td>            if(n == size)</td></tr><tr><th id="L675"><a href="#L675">675</a></th><td>                return n;</td></tr><tr><th id="L676"><a href="#L676">676</a></th><td>        }</td></tr><tr><th id="L677"><a href="#L677">677</a></th><td></td></tr><tr><th id="L678"><a href="#L678">678</a></th><td>        if(zip_method == -1) {</td></tr><tr><th id="L679"><a href="#L679">679</a></th><td>            if(zip_eof)</td></tr><tr><th id="L680"><a href="#L680">680</a></th><td>                break;</td></tr><tr><th id="L681"><a href="#L681">681</a></th><td></td></tr><tr><th id="L682"><a href="#L682">682</a></th><td>            // read in last block bit</td></tr><tr><th id="L683"><a href="#L683">683</a></th><td>            zip_NEEDBITS(1);</td></tr><tr><th id="L684"><a href="#L684">684</a></th><td>            if(zip_GETBITS(1) != 0)</td></tr><tr><th id="L685"><a href="#L685">685</a></th><td>                zip_eof = true;</td></tr><tr><th id="L686"><a href="#L686">686</a></th><td>            zip_DUMPBITS(1);</td></tr><tr><th id="L687"><a href="#L687">687</a></th><td></td></tr><tr><th id="L688"><a href="#L688">688</a></th><td>            // read in block type</td></tr><tr><th id="L689"><a href="#L689">689</a></th><td>            zip_NEEDBITS(2);</td></tr><tr><th id="L690"><a href="#L690">690</a></th><td>            zip_method = zip_GETBITS(2);</td></tr><tr><th id="L691"><a href="#L691">691</a></th><td>            zip_DUMPBITS(2);</td></tr><tr><th id="L692"><a href="#L692">692</a></th><td>            zip_tl = null;</td></tr><tr><th id="L693"><a href="#L693">693</a></th><td>            zip_copy_leng = 0;</td></tr><tr><th id="L694"><a href="#L694">694</a></th><td>        }</td></tr><tr><th id="L695"><a href="#L695">695</a></th><td></td></tr><tr><th id="L696"><a href="#L696">696</a></th><td>        switch(zip_method) {</td></tr><tr><th id="L697"><a href="#L697">697</a></th><td>          case 0: // zip_STORED_BLOCK</td></tr><tr><th id="L698"><a href="#L698">698</a></th><td>            i = zip_inflate_stored(buff, off + n, size - n);</td></tr><tr><th id="L699"><a href="#L699">699</a></th><td>            break;</td></tr><tr><th id="L700"><a href="#L700">700</a></th><td></td></tr><tr><th id="L701"><a href="#L701">701</a></th><td>          case 1: // zip_STATIC_TREES</td></tr><tr><th id="L702"><a href="#L702">702</a></th><td>            if(zip_tl != null)</td></tr><tr><th id="L703"><a href="#L703">703</a></th><td>                i = zip_inflate_codes(buff, off + n, size - n);</td></tr><tr><th id="L704"><a href="#L704">704</a></th><td>            else</td></tr><tr><th id="L705"><a href="#L705">705</a></th><td>                i = zip_inflate_fixed(buff, off + n, size - n);</td></tr><tr><th id="L706"><a href="#L706">706</a></th><td>            break;</td></tr><tr><th id="L707"><a href="#L707">707</a></th><td></td></tr><tr><th id="L708"><a href="#L708">708</a></th><td>          case 2: // zip_DYN_TREES</td></tr><tr><th id="L709"><a href="#L709">709</a></th><td>            if(zip_tl != null)</td></tr><tr><th id="L710"><a href="#L710">710</a></th><td>                i = zip_inflate_codes(buff, off + n, size - n);</td></tr><tr><th id="L711"><a href="#L711">711</a></th><td>            else</td></tr><tr><th id="L712"><a href="#L712">712</a></th><td>                i = zip_inflate_dynamic(buff, off + n, size - n);</td></tr><tr><th id="L713"><a href="#L713">713</a></th><td>            break;</td></tr><tr><th id="L714"><a href="#L714">714</a></th><td></td></tr><tr><th id="L715"><a href="#L715">715</a></th><td>          default: // error</td></tr><tr><th id="L716"><a href="#L716">716</a></th><td>            i = -1;</td></tr><tr><th id="L717"><a href="#L717">717</a></th><td>            break;</td></tr><tr><th id="L718"><a href="#L718">718</a></th><td>        }</td></tr><tr><th id="L719"><a href="#L719">719</a></th><td></td></tr><tr><th id="L720"><a href="#L720">720</a></th><td>        if(i == -1) {</td></tr><tr><th id="L721"><a href="#L721">721</a></th><td>            if(zip_eof)</td></tr><tr><th id="L722"><a href="#L722">722</a></th><td>                return 0;</td></tr><tr><th id="L723"><a href="#L723">723</a></th><td>            return -1;</td></tr><tr><th id="L724"><a href="#L724">724</a></th><td>        }</td></tr><tr><th id="L725"><a href="#L725">725</a></th><td>        n += i;</td></tr><tr><th id="L726"><a href="#L726">726</a></th><td>    }</td></tr><tr><th id="L727"><a href="#L727">727</a></th><td>    return n;</td></tr><tr><th id="L728"><a href="#L728">728</a></th><td>}</td></tr><tr><th id="L729"><a href="#L729">729</a></th><td></td></tr><tr><th id="L730"><a href="#L730">730</a></th><td>var zip_inflate = function(str) {</td></tr><tr><th id="L731"><a href="#L731">731</a></th><td>    var i, j;</td></tr><tr><th id="L732"><a href="#L732">732</a></th><td></td></tr><tr><th id="L733"><a href="#L733">733</a></th><td>    zip_inflate_start();</td></tr><tr><th id="L734"><a href="#L734">734</a></th><td>    zip_inflate_data = str;</td></tr><tr><th id="L735"><a href="#L735">735</a></th><td>    zip_inflate_pos = 0;</td></tr><tr><th id="L736"><a href="#L736">736</a></th><td></td></tr><tr><th id="L737"><a href="#L737">737</a></th><td>    var buff = new Array(1024);</td></tr><tr><th id="L738"><a href="#L738">738</a></th><td>    var aout = [];</td></tr><tr><th id="L739"><a href="#L739">739</a></th><td>    while((i = zip_inflate_internal(buff, 0, buff.length)) &gt; 0) {</td></tr><tr><th id="L740"><a href="#L740">740</a></th><td>        var cbuf = new Array(i);</td></tr><tr><th id="L741"><a href="#L741">741</a></th><td>        for(j = 0; j &lt; i; j++){</td></tr><tr><th id="L742"><a href="#L742">742</a></th><td>            cbuf[j] = String.fromCharCode(buff[j]);</td></tr><tr><th id="L743"><a href="#L743">743</a></th><td>        }</td></tr><tr><th id="L744"><a href="#L744">744</a></th><td>        aout[aout.length] = cbuf.join("");</td></tr><tr><th id="L745"><a href="#L745">745</a></th><td>    }</td></tr><tr><th id="L746"><a href="#L746">746</a></th><td>    zip_inflate_data = null; // G.C.</td></tr><tr><th id="L747"><a href="#L747">747</a></th><td>    return aout.join("");</td></tr><tr><th id="L748"><a href="#L748">748</a></th><td>}</td></tr><tr><th id="L749"><a href="#L749">749</a></th><td></td></tr><tr><th id="L750"><a href="#L750">750</a></th><td>if (! window.RawDeflate) RawDeflate = {};</td></tr><tr><th id="L751"><a href="#L751">751</a></th><td>RawDeflate.inflate = zip_inflate;</td></tr><tr><th id="L752"><a href="#L752">752</a></th><td></td></tr><tr><th id="L753"><a href="#L753">753</a></th><td>})();</td></tr></tbody></table>
      </div>
      <div id="help">
        <strong>Note:</strong> See <a href="/share/wiki/TracBrowser">TracBrowser</a>
        for help on using the browser.
      </div>
      <div id="anydiff">
        <form action="/share/diff" method="get">
          <div class="buttons">
            <input type="hidden" name="new_path" value="/lang/javascript/deflate/trunk/rawinflate.js" />
            <input type="hidden" name="old_path" value="/lang/javascript/deflate/trunk/rawinflate.js" />
            <input type="hidden" name="new_rev" value="30677" />
            <input type="hidden" name="old_rev" value="30677" />
            <input type="submit" value="View changes..." title="Select paths and revs for Diff" />
          </div>
        </form>
      </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="first">
          <a rel="nofollow" href="/share/browser/lang/javascript/deflate/trunk/rawinflate.js?format=txt">Plain Text</a>
        </li><li class="last">
          <a rel="nofollow" href="/share/export/38979/lang/javascript/deflate/trunk/rawinflate.js">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/share/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">
        Powered by <a href="/share/about"><strong>Trac 0.11</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.
      </p>
      <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
    </div>
  </body>
</html>